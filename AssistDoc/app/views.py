import json
import google.generativeai as genai
from django.conf import settings
from django.http import JsonResponse, HttpResponseServerError
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_exempt
from django.shortcuts import render
from django.shortcuts import get_object_or_404
from .models import Patient, Consultation, Symptom, Hospital, User
from django.contrib.auth import authenticate, login
from django.shortcuts import redirect
from django.contrib import messages
from django.views.decorators.csrf import csrf_protect
from django.contrib.auth.decorators import login_required
from datetime import datetime



# Configuration de Gemini (assurez-vous que la cl√© est dans settings.py)
try:
    genai.configure(api_key=settings.GEMINI_API_KEY)
except Exception as e:
    print(f"Erreur de configuration de l'API Gemini : {e}")


@csrf_exempt  # Pour simplifier. En production, utilisez la gestion CSRF de Django.
@require_POST
def generer_prescription(request):
    """
    Re√ßoit les donn√©es du patient en JSON, les envoie √† Gemini,
    et retourne la recommandation en JSON.
    """
    try:
        # 1. R√©cup√©rer les donn√©es du patient depuis le corps de la requ√™te
        patient_data = json.loads(request.body)
    except json.JSONDecodeError:
        return JsonResponse({"erreur": "JSON invalide dans la requ√™te."}, status=400)

    # 2. D√©finir la configuration du mod√®le (traduite depuis votre code TypeScript)
    # Le 'systemInstruction' et le 'schema' sont identiques √† votre app React
    system_instruction = """Tu es un syst√®me expert d'aide √† la d√©cision m√©dicale sp√©cialis√© dans la prescription de m√©dicaments. 
    Ton r√¥le est d'analyser les donn√©es cliniques d'un patient et de fournir des recommandations de prescription bas√©es sur les meilleures pratiques m√©dicales.
    
    IMPORTANT: Tu ne remplaces pas le jugement clinique d'un m√©decin. Tes recommandations sont des suggestions pour aider √† la prise de d√©cision.
    
    Analyse les donn√©es fournies et recommande des m√©dicaments appropri√©s en tenant compte de:
    - L'√¢ge, le poids et les conditions m√©dicales du patient
    - Les allergies et contre-indications
    - Les interactions m√©dicamenteuses potentielles
    - Les dosages appropri√©s selon les guidelines
    - Les effets secondaires possibles
    
    Fournis des justifications claires pour chaque recommandation."""
    
    # Le sch√©ma de la r√©ponse attendue
    prescription_schema = {
        'type': 'OBJECT',
        'properties': {
            'recommandations_prescription': {
                'type': 'ARRAY',
                'items': {
                    'type': 'OBJECT',
                    'properties': {
                        'nom_medicament': {'type': 'STRING'},
                        'posologie': {'type': 'STRING'},
                        'voie_administration': {'type': 'STRING'},
                        'justification': {'type': 'STRING'},
                        'effets_secondaires_cles': {'type': 'ARRAY', 'items': {'type': 'STRING'}},
                        'contre_indications_notables': {'type': 'ARRAY', 'items': {'type': 'STRING'}},
                        'interactions_medic_potentielles': {'type': 'STRING'},
                        'notes_supplementaires_ia': {'type': 'STRING'},
                    },
                    'required': ["nom_medicament", "posologie", "voie_administration", "justification"]
                }
            }
        },
        'required': ["recommandations_prescription"]
    }

    try:
        # Initialisation du mod√®le avec la configuration
        model = genai.GenerativeModel(
            model_name='gemini-1.5-flash',
            system_instruction=system_instruction,
            generation_config=genai.types.GenerationConfig(
                response_mime_type="application/json",
                response_schema=prescription_schema
            )
        )

        # 3. Cr√©er le prompt
        prompt = f"Voici les donn√©es du patient. Analyse-les et fournis tes recommandations de prescription.\n\n{json.dumps(patient_data, indent=2, ensure_ascii=False)}"

        # 4. Appeler l'API Gemini
        response = model.generate_content(prompt)
        
        # L'API retourne un texte qui est une cha√Æne JSON, on la parse en dictionnaire Python
        donnees_recommandation = json.loads(response.text)

        # 5. Renvoyer le r√©sultat au frontend
        return JsonResponse(donnees_recommandation)

    except Exception as e:
        print(f"Erreur lors de l'appel √† l'API Gemini : {e}")
        return JsonResponse(
            {"erreur": f"Une erreur est survenue lors de la communication avec le service d'IA: {str(e)}"},
            status=500
        )


@csrf_protect
@login_required
@require_POST
def traiter_consultation(request):
    """
    Traite le formulaire de consultation, r√©cup√®re les donn√©es du patient et historique,
    envoie tout √† Gemini pour obtenir diagnostic et prescriptions.
    """
    try:
        # R√©cup√©rer l'ID du patient depuis le formulaire
        patient_id = request.POST.get('patient_id')
        if not patient_id:
            messages.error(request, 'Patient non sp√©cifi√©.')
            return redirect('consultation')
        
        # R√©cup√©rer le patient
        patient = get_object_or_404(Patient, id=patient_id)
        
        # R√©cup√©rer les donn√©es du formulaire de consultation
        consultation_data = {
            'consultation_reason': request.POST.get('consultation_reason', ''),
            'clinical_exam': request.POST.get('clinical_exam', ''),
            'symptoms_text': request.POST.get('symptoms_text', ''),
            'tension': request.POST.get('tension_arterielle', ''),
            'temperature': request.POST.get('temperature', ''),
            'heart_rate': request.POST.get('frequence_cardiaque', ''),
            'weight': request.POST.get('poids_kg', ''),
            'height': request.POST.get('taille_cm', ''),
            'oxygen_saturation': request.POST.get('saturation_o2', ''),
            'additional_notes': request.POST.get('additional_notes', ''),
        }
        
        # R√©cup√©rer l'historique des consultations du patient
        consultations_precedentes = Consultation.objects.filter(patient=patient).order_by('-consultation_date')[:5]
        
        # Construire les donn√©es compl√®tes pour Gemini
        data_pour_gemini = {
            "patient": {
                "nom_complet": f"{patient.first_name} {patient.last_name}",
                "age": patient.birth_date.year if patient.birth_date else "Non sp√©cifi√©",
                "sexe": patient.gender,
                "numero_securite_sociale": patient.social_security_number,
                "allergies": patient.allergies or "Aucune allergie connue",
                "antecedents_medicaux": {
                    "maladies": patient.diseases or "Aucune maladie connue",
                    "chirurgies": patient.surgeries or "Aucune chirurgie",
                    "vaccinations": patient.vaccines or "Historique vaccinal non disponible",
                    "medicaments_actuels": patient.actual_medecines or "Aucun m√©dicament actuel"
                }
            },
            "consultation_actuelle": {
                "motif_consultation": consultation_data['consultation_reason'],
                "examen_clinique": consultation_data['clinical_exam'],
                "symptomes_decrits": consultation_data['symptoms_text'],
                "signes_vitaux": {
                    "tension_arterielle": consultation_data['tension'],
                    "temperature": consultation_data['temperature'],
                    "frequence_cardiaque": consultation_data['heart_rate'],
                    "poids": consultation_data['weight'],
                    "taille": consultation_data['height'],
                    "saturation_oxygene": consultation_data['oxygen_saturation']
                },
                "notes_supplementaires": consultation_data['additional_notes']
            },
            "historique_consultations": []
        }
        
        # Ajouter l'historique des consultations
        for consultation in consultations_precedentes:
            data_pour_gemini["historique_consultations"].append({
                "date": consultation.consultation_date.strftime("%Y-%m-%d"),
                "motif": consultation.consultation_reason,
                "diagnostic": consultation.initial_diagnosis or "Non sp√©cifi√©",
                "signes_vitaux": {
                    "tension": str(consultation.tension) if consultation.tension else None,
                    "temperature": str(consultation.temperature) if consultation.temperature else None,
                    "frequence_cardiaque": consultation.heart_rate if consultation.heart_rate else None
                }
            })
        
        # Configuration du mod√®le Gemini pour diagnostic et prescription
        base_system_instruction = """Tu es un m√©decin expert sp√©cialis√© dans le diagnostic m√©dical et la prescription de m√©dicaments. 
        Ton r√¥le est d'analyser les donn√©es compl√®tes d'un patient incluant ses ant√©c√©dents, la consultation actuelle et l'historique m√©dical pour fournir:
        
        1. UN DIAGNOSTIC D√âTAILL√â avec diagnostic diff√©rentiel
        2. DES RECOMMANDATIONS DE PRESCRIPTION sp√©cifiques et justifi√©es
        3. DES RECOMMANDATIONS DE SUIVI
        
        IMPORTANT: 
        - Tes recommandations sont des suggestions pour aider le m√©decin dans sa prise de d√©cision
        - Consid√®re toujours les allergies, ant√©c√©dents et interactions m√©dicamenteuses
        - Fournis des justifications m√©dicales claires
        - Propose des alternatives si n√©cessaire
        
        Analyse TOUTES les donn√©es fournies: patient, consultation actuelle, et historique m√©dical."""
        
        # üöÄ NOUVEAU: Enrichir le prompt avec les patterns de feedback
        try:
            from .prompt_enhancement import get_enhanced_system_instruction, get_contextual_enhancements
            from django.utils import timezone as django_timezone
            
            # Enrichissement principal bas√© sur les patterns globaux
            enhanced_instruction = get_enhanced_system_instruction(base_system_instruction)
            
            # Enrichissement contextuel bas√© sur le patient
            contextual_enhancements = get_contextual_enhancements(
                symptoms=consultation_data['symptoms_text'],
                patient_age=django_timezone.now().year - patient.birth_date.year if patient.birth_date else None,
                patient_gender=patient.gender
            )
            
            system_instruction = enhanced_instruction + contextual_enhancements
            
        except Exception as e:
            # Fallback vers l'instruction de base en cas d'erreur
            print(f"Erreur lors de l'enrichissement du prompt: {e}")
            system_instruction = base_system_instruction
        
        prescription_schema = {
            'type': 'OBJECT',
            'properties': {
                'diagnostic_principal': {'type': 'STRING'},
                'diagnostic_differentiel': {
                    'type': 'ARRAY',
                    'items': {'type': 'STRING'}
                },
                'justification_diagnostic': {'type': 'STRING'},
                'prescriptions_recommandees': {
                    'type': 'ARRAY',
                    'items': {
                        'type': 'OBJECT',
                        'properties': {
                            'nom_medicament': {'type': 'STRING'},
                            'dosage': {'type': 'STRING'},
                            'frequence': {'type': 'STRING'},
                            'duree_traitement': {'type': 'STRING'},
                            'voie_administration': {'type': 'STRING'},
                            'justification': {'type': 'STRING'},
                            'precautions': {'type': 'STRING'},
                            'effets_secondaires_surveiller': {
                                'type': 'ARRAY',
                                'items': {'type': 'STRING'}
                            }
                        },
                        'required': ['nom_medicament', 'dosage', 'frequence', 'justification']
                    }
                },
                'examens_complementaires': {
                    'type': 'ARRAY',
                    'items': {'type': 'STRING'}
                },
                'recommandations_suivi': {'type': 'STRING'},
                'conseils_patient': {'type': 'STRING'},
                'urgence_niveau': {
                    'type': 'STRING',
                    'enum': ['Faible', 'Mod√©r√©', '√âlev√©', 'Urgent']
                }
            },
            'required': ['diagnostic_principal', 'justification_diagnostic', 'prescriptions_recommandees']
        }
        
        # Cr√©er le mod√®le Gemini
        model = genai.GenerativeModel(
            model_name='gemini-1.5-flash',
            system_instruction=system_instruction,
            generation_config=genai.types.GenerationConfig(
                response_mime_type="application/json",
                response_schema=prescription_schema
            )
        )
        
        # Cr√©er le prompt d√©taill√©
        prompt = f"""Analyse compl√®te du patient et recommandations m√©dicales:

{json.dumps(data_pour_gemini, indent=2, ensure_ascii=False)}

Fournis une analyse compl√®te avec diagnostic et prescriptions d√©taill√©es bas√©es sur toutes ces donn√©es."""
        
        # Appeler Gemini
        response = model.generate_content(prompt)
        recommendations = json.loads(response.text)
        
        # Sauvegarder la consultation dans la base de donn√©es
        nouvelle_consultation = Consultation.objects.create(
            patient=patient,
            hospital=request.user.hospitals.first() if request.user.hospitals.exists() else None,
            doctor=request.user,
            consultation_reason=consultation_data['consultation_reason'],
            clinical_exam=consultation_data['clinical_exam'],
            initial_diagnosis=recommendations.get('diagnostic_principal', ''),
            tension=float(consultation_data['tension'].replace('/', '.').split('/')[0]) if consultation_data['tension'] else None,
            temperature=float(consultation_data['temperature'].replace('¬∞C', '')) if consultation_data['temperature'] else None,
            heart_rate=int(consultation_data['heart_rate'].replace('bpm', '').strip()) if consultation_data['heart_rate'] else None,
            weight=float(consultation_data['weight']) if consultation_data['weight'] else None,
            height=float(consultation_data['height']) if consultation_data['height'] else None,
            oxygen_saturation=float(consultation_data['oxygen_saturation'].replace('%', '')) if consultation_data['oxygen_saturation'] else None,
        )
        
        # Retourner la page de r√©sultats avec les recommandations
        context = {
            'patient': patient,
            'consultation': nouvelle_consultation,
            'recommendations': recommendations,
            'consultation_data': consultation_data
        }
        
        return render(request, 'consultation_results.html', context)
        
    except Exception as e:
        print(f"Erreur lors du traitement de la consultation: {e}")
        messages.error(request, f'Une erreur est survenue: {str(e)}')
        return redirect('consultation')


def index(request):
    return render(request, 'index.html')

@csrf_protect
def login_page(request):
    # Rediriger si l'utilisateur est d√©j√† connect√©
    #if request.user.is_authenticated:
       #  return redirect("dashboard")
    
    if request.method == "POST":
        # R√©cup√©rer les donn√©es du formulaire
        username = request.POST.get("username")  # Plus clair
        password = request.POST.get("password")
        
        # Validation des champs
        if not username or not password:
            messages.error(request, 'Veuillez remplir tous les champs.')
            return render(request, 'login.html')
        
        print(f"Tentative de connexion pour: {username}")  # Debug
        
        # V√©rifier d'abord si l'utilisateur existe
        try:
            from .models import User
            user_exists = User.objects.filter(username=username).exists()
            if not user_exists:
                print(f"Utilisateur '{username}' non trouv√© dans la base de donn√©es")
                messages.error(request, 'Utilisateur non trouv√©. V√©rifiez votre nom d\'utilisateur.')
                return render(request, 'login.html')
            
            # R√©cup√©rer l'utilisateur pour v√©rifier ses propri√©t√©s
            user_obj = User.objects.get(username=username)
            print(f"Utilisateur trouv√© - Type: {user_obj.user_type}, Actif: {user_obj.is_active}")
            
            # V√©rifier si c'est un m√©decin avant l'authentification
            if user_obj.user_type != 'doctor':
                print(f"Utilisateur '{username}' n'est pas un m√©decin (type: {user_obj.user_type})")
                messages.error(request, 'Acc√®s r√©serv√© aux m√©decins uniquement.')
                return render(request, 'login.html')
            
            # V√©rifier si l'utilisateur est actif
            if not user_obj.is_active:
                print(f"Utilisateur '{username}' est inactif")
                messages.error(request, 'Votre compte est d√©sactiv√©. Contactez l\'administrateur.')
                return render(request, 'login.html')
                
        except Exception as e:
            print(f"Erreur lors de la v√©rification de l'utilisateur: {e}")
            messages.error(request, 'Erreur lors de la v√©rification. Contactez l\'administrateur.')
            return render(request, 'login.html')
        
        # Authentification
        user = authenticate(request, username=username, password=password)
        
        if user is not None:
            print(f"Authentification r√©ussie pour: {user.username}")
            login(request, user)
            messages.success(request, f'Bienvenue Dr. {user.get_full_name() or user.username}')
            
            # Redirection vers la page demand√©e ou dashboard par d√©faut
            next_url = request.GET.get('next', 'dashboard')
            return redirect(next_url)
        else:
            print(f"√âchec d'authentification pour: {username}")  # Debug
            messages.error(request, 'Mot de passe incorrect. V√©rifiez votre mot de passe.')
    
    return render(request, 'login.html')

def dashboard(request):
    numero = request.GET.get('numero', '').strip()

    if numero.isdigit():
        patients = Patient.objects.filter(social_security_number=numero)
    else:
        patients = Patient.objects.all()

    context = {
        'patients': patients,
    }
    return render(request, 'dashboard.html', context)

def consultation(request):
    return render(request, 'consultation.html')

def symptome(request, patient_social_security_number):
    patient = get_object_or_404(Patient, social_security_number=patient_social_security_number)
    
    # V√©rifier si on veut √©diter une consultation existante
    edit_consultation_id = request.GET.get('edit')
    edit_consultation = None
    if edit_consultation_id:
        try:
            edit_consultation = Consultation.objects.get(id=edit_consultation_id, patient=patient)
        except Consultation.DoesNotExist:
            messages.error(request, 'Consultation non trouv√©e.')
    
    if request.method == 'POST':
        # Appeler directement la logique de traitement de consultation
        try:
            # R√©cup√©rer les donn√©es du formulaire de consultation
            consultation_data = {
                'consultation_reason': request.POST.get('consultation_reason', ''),
                'clinical_exam': request.POST.get('clinical_exam', ''),
                'symptoms_text': request.POST.get('symptoms_text', ''),
                'tension': request.POST.get('tension_arterielle', ''),
                'temperature': request.POST.get('temperature', ''),
                'heart_rate': request.POST.get('frequence_cardiaque', ''),
                'weight': request.POST.get('poids_kg', ''),
                'height': request.POST.get('taille_cm', ''),
                'oxygen_saturation': request.POST.get('saturation_o2', ''),
                'additional_notes': request.POST.get('additional_notes', ''),
            }
            
            # R√©cup√©rer l'historique des consultations du patient
            consultations_precedentes = Consultation.objects.filter(patient=patient).order_by('-consultation_date')[:5]
            
            # Construire les donn√©es compl√®tes pour Gemini
            data_pour_gemini = {
                "patient": {
                    "nom_complet": f"{patient.first_name} {patient.last_name}",
                    "age": patient.birth_date.year if patient.birth_date else "Non sp√©cifi√©",
                    "sexe": patient.gender,
                    "numero_securite_sociale": patient.social_security_number,
                    "allergies": patient.allergies or "Aucune allergie connue",
                    "antecedents_medicaux": {
                        "maladies": patient.diseases or "Aucune maladie connue",
                        "chirurgies": patient.surgeries or "Aucune chirurgie",
                        "vaccinations": patient.vaccines or "Historique vaccinal non disponible",
                        "medicaments_actuels": patient.actual_medecines or "Aucun m√©dicament actuel"
                    }
                },
                "consultation_actuelle": {
                    "motif_consultation": consultation_data['consultation_reason'],
                    "examen_clinique": consultation_data['clinical_exam'],
                    "symptomes_decrits": consultation_data['symptoms_text'],
                    "signes_vitaux": {
                        "tension_arterielle": consultation_data['tension'],
                        "temperature": consultation_data['temperature'],
                        "frequence_cardiaque": consultation_data['heart_rate'],
                        "poids": consultation_data['weight'],
                        "taille": consultation_data['height'],
                        "saturation_oxygene": consultation_data['oxygen_saturation']
                    },
                    "notes_supplementaires": consultation_data['additional_notes']
                },
                "historique_consultations": []
            }
            
            # Ajouter l'historique des consultations
            for consultation in consultations_precedentes:
                data_pour_gemini["historique_consultations"].append({
                    "date": consultation.consultation_date.strftime("%Y-%m-%d"),
                    "motif": consultation.consultation_reason,
                    "diagnostic": consultation.initial_diagnosis or "Non sp√©cifi√©",
                    "signes_vitaux": {
                        "tension": str(consultation.tension) if consultation.tension else None,
                        "temperature": str(consultation.temperature) if consultation.temperature else None,
                        "frequence_cardiaque": consultation.heart_rate if consultation.heart_rate else None
                    }
                })
            
            # Configuration du mod√®le Gemini pour diagnostic et prescription
            system_instruction = """Tu es un m√©decin expert sp√©cialis√© dans le diagnostic m√©dical et la prescription de m√©dicaments. 
            Ton r√¥le est d'analyser les donn√©es compl√®tes d'un patient incluant ses ant√©c√©dents, la consultation actuelle et l'historique m√©dical pour fournir:
            
            1. UN DIAGNOSTIC D√âTAILL√â avec diagnostic diff√©rentiel
            2. DES RECOMMANDATIONS DE PRESCRIPTION sp√©cifiques et justifi√©es
            3. UNE ORDONNANCE M√âDICALE FORMELLE avec m√©dicaments d√©taill√©s
            4. DES RECOMMANDATIONS DE SUIVI
            
            IMPORTANT: 
            - Tes recommandations sont des suggestions pour aider le m√©decin dans sa prise de d√©cision
            - Consid√®re toujours les allergies, ant√©c√©dents et interactions m√©dicamenteuses
            - Fournis des justifications m√©dicales claires
            - Pour l'ordonnance, propose des m√©dicaments avec posologie pr√©cise, fr√©quence et dur√©e
            - Inclus des instructions claires pour le patient
            - Propose des alternatives si n√©cessaire
            
            Analyse TOUTES les donn√©es fournies: patient, consultation actuelle, et historique m√©dical.
            
            L'ordonnance doit √™tre compl√®te et pr√™te √† √™tre utilis√©e par le m√©decin."""
            
            prescription_schema = {
                'type': 'OBJECT',
                'properties': {
                    'diagnostic_principal': {'type': 'STRING'},
                    'diagnostic_differentiel': {
                        'type': 'ARRAY',
                        'items': {'type': 'STRING'}
                    },
                    'justification_diagnostic': {'type': 'STRING'},
                    'prescriptions_recommandees': {
                        'type': 'ARRAY',
                        'items': {
                            'type': 'OBJECT',
                            'properties': {
                                'nom_medicament': {'type': 'STRING'},
                                'dosage': {'type': 'STRING'},
                                'frequence': {'type': 'STRING'},
                                'duree_traitement': {'type': 'STRING'},
                                'voie_administration': {'type': 'STRING'},
                                'justification': {'type': 'STRING'},
                                'precautions': {'type': 'STRING'},
                                'effets_secondaires_surveiller': {
                                    'type': 'ARRAY',
                                    'items': {'type': 'STRING'}
                                }
                            },
                            'required': ['nom_medicament', 'dosage', 'frequence', 'justification']
                        }
                    },
                    'examens_complementaires': {
                        'type': 'ARRAY',
                        'items': {'type': 'STRING'}
                    },
                    'recommandations_suivi': {'type': 'STRING'},
                    'conseils_patient': {'type': 'STRING'},
                    'urgence_niveau': {
                        'type': 'STRING',
                        'enum': ['Faible', 'Mod√©r√©', '√âlev√©', 'Urgent']
                    },
                    'ordonnance_medicale': {
                        'type': 'OBJECT',
                        'properties': {
                            'medicaments': {
                                'type': 'ARRAY',
                                'items': {
                                    'type': 'OBJECT',
                                    'properties': {
                                        'nom_commercial': {'type': 'STRING'},
                                        'nom_generique': {'type': 'STRING'},
                                        'forme': {'type': 'STRING'},  # comprim√©, g√©lule, sirop, etc.
                                        'dosage_unitaire': {'type': 'STRING'},  # ex: 500mg
                                        'posologie': {'type': 'STRING'},  # ex: 1 comprim√©
                                        'frequence': {'type': 'STRING'},  # ex: 3 fois par jour
                                        'duree': {'type': 'STRING'},  # ex: 7 jours
                                        'moment_prise': {'type': 'STRING'},  # ex: avant les repas
                                        'instructions_speciales': {'type': 'STRING'}
                                    },
                                    'required': ['nom_commercial', 'posologie', 'frequence', 'duree']
                                }
                            },
                            'instructions_generales': {'type': 'STRING'},
                            'contre_indications': {'type': 'STRING'},
                            'renouvellement': {'type': 'STRING'},  # ex: "Non renouvelable" ou "Renouvelable 2 fois"
                            'duree_validite': {'type': 'STRING'}  # ex: "3 mois"
                        },
                        'required': ['medicaments', 'instructions_generales']
                    }
                },
                'required': ['diagnostic_principal', 'justification_diagnostic', 'prescriptions_recommandees', 'ordonnance_medicale']
            }
            
            # Cr√©er le mod√®le Gemini
            model = genai.GenerativeModel(
                model_name='gemini-1.5-flash',
                system_instruction=system_instruction,
                generation_config=genai.types.GenerationConfig(
                    response_mime_type="application/json",
                    response_schema=prescription_schema
                )
            )
            
            # Cr√©er le prompt d√©taill√©
            prompt = f"""Analyse compl√®te du patient et recommandations m√©dicales:

{json.dumps(data_pour_gemini, indent=2, ensure_ascii=False)}

Fournis une analyse compl√®te avec diagnostic et prescriptions d√©taill√©es bas√©es sur toutes ces donn√©es."""
            
            # Appeler Gemini
            response = model.generate_content(prompt)
            recommendations = json.loads(response.text)
            
            # Sauvegarder la consultation dans la base de donn√©es
            nouvelle_consultation = Consultation.objects.create(
                patient=patient,
                hospital=request.user.hospitals.first() if request.user.hospitals.exists() else None,
                doctor=request.user,
                consultation_reason=consultation_data['consultation_reason'],
                clinical_exam=consultation_data['clinical_exam'],
                initial_diagnosis=recommendations.get('diagnostic_principal', ''),
                tension=float(consultation_data['tension'].replace('/', '.').split('/')[0]) if consultation_data['tension'] else None,
                temperature=float(consultation_data['temperature']) if consultation_data['temperature'] else None,
                heart_rate=int(consultation_data['heart_rate']) if consultation_data['heart_rate'] else None,
                weight=float(consultation_data['weight']) if consultation_data['weight'] else None,
                height=float(consultation_data['height']) if consultation_data['height'] else None,
                oxygen_saturation=float(consultation_data['oxygen_saturation']) if consultation_data['oxygen_saturation'] else None,
                gemini_recommendations=recommendations,  # Stocker les recommandations Gemini
            )
            
            # Retourner la page de r√©sultats avec les recommandations
            context = {
                'patient': patient,
                'consultation': nouvelle_consultation,
                'recommendations': recommendations,
                'consultation_data': consultation_data
            }
            
            return render(request, 'consultation_results.html', context)
            
        except Exception as e:
            print(f"Erreur lors du traitement de la consultation: {e}")
            messages.error(request, f'Une erreur est survenue: {str(e)}')
            return render(request, 'symptome.html', {'patient': patient})
    
    # Pr√©parer le contexte avec les donn√©es d'√©dition si n√©cessaire
    context = {
        'patient': patient,
        'edit_consultation': edit_consultation
    }
    return render(request, 'symptome.html', context)

@csrf_protect
@login_required
@require_POST
def valider_consultation(request, consultation_id):
    """
    Valide une consultation et l'ajoute d√©finitivement √† l'historique
    Cr√©e automatiquement un feedback pour l'IA
    """
    try:
        consultation = get_object_or_404(Consultation, id=consultation_id, doctor=request.user)
        
        # Marquer la consultation comme valid√©e
        consultation.is_validated = True
        consultation.save()
        
        # Cr√©er automatiquement un feedback de base
        from .models import PrescriptionFeedback
        
        # V√©rifier si un feedback existe d√©j√†
        if not hasattr(consultation, 'feedback'):
            # D√©terminer le type de feedback selon l'historique
            feedback_type = 'validee_directement'  # Par d√©faut
            
            # Si des modifications ont √©t√© apport√©es, d√©tecter cela via la consultation
            # (Vous pourrez am√©liorer cette logique selon vos besoins)
            if request.POST.get('was_modified') == 'true':
                feedback_type = 'modifiee'
            
            feedback = PrescriptionFeedback.objects.create(
                consultation=consultation,
                doctor=request.user,
                feedback_type=feedback_type,
                pertinence_diagnostic=8,  # Score par d√©faut - peut √™tre modifi√© plus tard
                pertinence_prescription=8,  # Score par d√©faut - peut √™tre modifi√© plus tard
                commentaires_medecin="Validation automatique lors de la validation de consultation"
            )
            
            messages.success(request, 'Consultation valid√©e et feedback cr√©√© pour l\'am√©lioration de l\'IA.')
        else:
            messages.success(request, 'Consultation valid√©e avec succ√®s.')
        
        return redirect('dashboard')
        
    except Exception as e:
        messages.error(request, f'Erreur lors de la validation: {str(e)}')
        return redirect('dashboard')

@csrf_protect
@login_required
def modifier_prescription(request, consultation_id):
    """
    Permet de modifier la prescription g√©n√©r√©e par l'IA
    """
    try:
        consultation = get_object_or_404(Consultation, id=consultation_id, doctor=request.user)
        
        if request.method == 'POST':
            # R√©cup√©rer les donn√©es modifi√©es du formulaire
            prescriptions_text = request.POST.get('prescriptions_recommandees', '')
            
            # Convertir le texte des prescriptions en format structur√©
            prescriptions_structurees = []
            if prescriptions_text.strip():
                # Diviser le texte par lignes pour traiter chaque m√©dicament
                lignes = prescriptions_text.strip().split('\n')
                medicament_actuel = {}
                
                for ligne in lignes:
                    ligne = ligne.strip()
                    if ligne and (ligne[0].isdigit() or ligne.startswith('-')):
                        # Si c'est une nouvelle entr√©e de m√©dicament (commence par un num√©ro)
                        if ligne[0].isdigit():
                            # Sauvegarder le m√©dicament pr√©c√©dent s'il existe
                            if medicament_actuel:
                                prescriptions_structurees.append(medicament_actuel)
                            
                            # Nouveau m√©dicament
                            nom_medicament = ligne.split('.', 1)[1].strip() if '.' in ligne else ligne
                            medicament_actuel = {
                                'nom_medicament': nom_medicament,
                                'dosage': '',
                                'frequence': '',
                                'duree_traitement': '',
                                'justification': '',
                                'voie_administration': 'Orale'
                            }
                        else:
                            # C'est une ligne de d√©tail (dosage, fr√©quence, etc.)
                            if 'Dosage:' in ligne:
                                medicament_actuel['dosage'] = ligne.split('Dosage:')[1].strip()
                            elif 'Fr√©quence:' in ligne:
                                medicament_actuel['frequence'] = ligne.split('Fr√©quence:')[1].strip()
                            elif 'Dur√©e:' in ligne:
                                medicament_actuel['duree_traitement'] = ligne.split('Dur√©e:')[1].strip()
                            elif 'Justification:' in ligne:
                                medicament_actuel['justification'] = ligne.split('Justification:')[1].strip()
                
                # Ajouter le dernier m√©dicament
                if medicament_actuel:
                    prescriptions_structurees.append(medicament_actuel)
            
            # Structure des recommandations modifi√©es
            recommendations_modifiees = {
                'diagnostic_principal': request.POST.get('diagnostic_principal', ''),
                'justification_diagnostic': request.POST.get('justification_diagnostic', ''),
                'prescriptions_recommandees': prescriptions_structurees,  # Format structur√©
                'recommandations_suivi': request.POST.get('recommandations_suivi', ''),
                'conseils_patient': request.POST.get('conseils_patient', ''),
                'urgence_niveau': request.POST.get('urgence_niveau', 'Faible'),
                'ordonnance_medicale': {
                    'instructions_generales': request.POST.get('instructions_generales', ''),
                    'medicaments': prescriptions_structurees,  # Utiliser la m√™me structure
                    'contre_indications': request.POST.get('contre_indications', ''),
                    'renouvellement': request.POST.get('renouvellement', 'Non renouvelable'),
                    'duree_validite': request.POST.get('duree_validite', '3 mois')
                }
            }
            
            # Sauvegarder les modifications dans la consultation
            original_recommendations = consultation.gemini_recommendations.copy() if consultation.gemini_recommendations else {}
            consultation.gemini_recommendations = recommendations_modifiees
            consultation.initial_diagnosis = recommendations_modifiees['diagnostic_principal']
            consultation.save()
            
            # Cr√©er ou mettre √† jour le feedback pour les modifications
            from .models import PrescriptionFeedback
            
            try:
                # V√©rifier si un feedback existe d√©j√†
                if hasattr(consultation, 'feedback'):
                    feedback = consultation.feedback
                    feedback.feedback_type = 'modifiee'
                    feedback.modifications_effectuees = f"Prescription modifi√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}"
                    feedback.raison_modification = request.POST.get('raison_modification', 'Modifications par le m√©decin')
                    feedback.save()
                else:
                    # Cr√©er un nouveau feedback
                    feedback = PrescriptionFeedback.objects.create(
                        consultation=consultation,
                        doctor=request.user,
                        feedback_type='modifiee',
                        modifications_effectuees=f"Prescription modifi√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}",
                        raison_modification=request.POST.get('raison_modification', 'Modifications par le m√©decin'),
                        pertinence_diagnostic=7,  # Score par d√©faut pour les modifications
                        pertinence_prescription=7,  # Score par d√©faut pour les modifications
                        commentaires_medecin="Feedback automatique - prescription modifi√©e"
                    )
                
                messages.success(request, 'Prescription modifi√©e avec succ√®s. Feedback enregistr√© pour l\'am√©lioration de l\'IA.')
            except Exception as e:
                messages.warning(request, f'Prescription modifi√©e, mais erreur lors de l\'enregistrement du feedback: {str(e)}')
            
            # Retourner vers la page de r√©sultats avec les modifications
            context = {
                'patient': consultation.patient,
                'consultation': consultation,
                'recommendations': recommendations_modifiees,
                'is_modified': True
            }
            return render(request, 'consultation_results.html', context)
            
        # Si GET, afficher le formulaire de modification avec les donn√©es existantes
        recommendations = consultation.gemini_recommendations or {}
        
        context = {
            'consultation': consultation,
            'patient': consultation.patient,
            'recommendations': recommendations
        }
        return render(request, 'modifier_prescription.html', context)
        
    except Exception as e:
        messages.error(request, f'Erreur lors de la modification: {str(e)}')
        return redirect('dashboard')

@csrf_protect
@login_required
@require_POST
def supprimer_consultation(request, consultation_id):
    """
    Supprime une consultation sp√©cifique
    """
    try:
        consultation = get_object_or_404(Consultation, id=consultation_id, doctor=request.user)
        patient = consultation.patient
        consultation.delete()
        messages.success(request, 'Consultation supprim√©e avec succ√®s.')
        return redirect('dashboard')
    except Exception as e:
        messages.error(request, f'Erreur lors de la suppression: {str(e)}')
        return redirect('dashboard')

def patient_detail(request, pk):
    patient = get_object_or_404(Patient, pk=pk)
    
    # R√©cup√©rer toutes les consultations valid√©es de ce patient, tri√©es par date d√©croissante
    consultations_validees = Consultation.objects.filter(
        patient=patient, 
        is_validated=True
    ).order_by('-consultation_date')
    
    context = {
        'patient': patient,
        'consultations_validees': consultations_validees,
    }
    return render(request, 'patient_detail.html', context)

@csrf_protect
@login_required
def donner_feedback(request, consultation_id):
    """
    Permet au m√©decin de donner un feedback d√©taill√© sur une prescription IA
    """
    try:
        consultation = get_object_or_404(Consultation, id=consultation_id, doctor=request.user)
        
        # R√©cup√©rer ou cr√©er le feedback
        from .models import PrescriptionFeedback
        feedback, created = PrescriptionFeedback.objects.get_or_create(
            consultation=consultation,
            doctor=request.user,
            defaults={
                'feedback_type': 'validee_directement',
                'pertinence_diagnostic': 5,
                'pertinence_prescription': 5
            }
        )
        
        if request.method == 'POST':
            # Mettre √† jour le feedback avec les donn√©es du formulaire
            feedback.feedback_type = request.POST.get('feedback_type', feedback.feedback_type)
            feedback.modifications_effectuees = request.POST.get('modifications_effectuees', '')
            feedback.raison_modification = request.POST.get('raison_modification', '')
            feedback.efficacite_traitement = request.POST.get('efficacite_traitement', 'non_evalue')
            feedback.effets_secondaires_observes = request.POST.get('effets_secondaires_observes', '')
            
            # Convertir en entier les champs num√©riques
            try:
                feedback.duree_guerison = int(request.POST.get('duree_guerison', 0)) if request.POST.get('duree_guerison') else None
                feedback.satisfaction_patient = int(request.POST.get('satisfaction_patient', 0)) if request.POST.get('satisfaction_patient') else None
                feedback.pertinence_diagnostic = int(request.POST.get('pertinence_diagnostic', 5))
                feedback.pertinence_prescription = int(request.POST.get('pertinence_prescription', 5))
            except ValueError:
                messages.error(request, 'Valeurs num√©riques invalides.')
                return render(request, 'donner_feedback.html', {'consultation': consultation, 'feedback': feedback})
            
            feedback.commentaires_patient = request.POST.get('commentaires_patient', '')
            feedback.commentaires_medecin = request.POST.get('commentaires_medecin', '')
            feedback.suivi_complete = request.POST.get('suivi_complete') == 'on'
            
            feedback.save()
            
            messages.success(request, 'Feedback enregistr√© avec succ√®s. Merci de contribuer √† l\'am√©lioration de l\'IA!')
            return redirect('dashboard')
        
        # Affichage du formulaire
        context = {
            'consultation': consultation,
            'patient': consultation.patient,
            'feedback': feedback,
            'feedback_choices': PrescriptionFeedback.FEEDBACK_CHOICES,
            'efficacite_choices': PrescriptionFeedback.EFFICACITE_CHOICES,
        }
        return render(request, 'donner_feedback.html', context)
        
    except Exception as e:
        messages.error(request, f'Erreur lors du feedback: {str(e)}')
        return redirect('dashboard')

@csrf_protect
@login_required
@require_POST
def annuler_prescription(request, consultation_id):
    """
    Marque une prescription comme annul√©e/rejet√©e
    """
    try:
        consultation = get_object_or_404(Consultation, id=consultation_id, doctor=request.user)
        
        # Cr√©er ou mettre √† jour le feedback pour indiquer l'annulation
        from .models import PrescriptionFeedback
        
        feedback, created = PrescriptionFeedback.objects.get_or_create(
            consultation=consultation,
            doctor=request.user,
            defaults={
                'feedback_type': 'annulee',
                'pertinence_diagnostic': 3,  # Score plus faible car annul√©e
                'pertinence_prescription': 3,
                'commentaires_medecin': 'Prescription annul√©e par le m√©decin'
            }
        )
        
        if not created:
            feedback.feedback_type = 'annulee'
            feedback.save()
        
        # Marquer la consultation comme non valid√©e
        consultation.is_validated = False
        consultation.save()
        
        messages.success(request, 'Prescription annul√©e. Feedback enregistr√© pour l\'am√©lioration de l\'IA.')
        return redirect('dashboard')
        
    except Exception as e:
        messages.error(request, f'Erreur lors de l\'annulation: {str(e)}')
        return redirect('dashboard')



